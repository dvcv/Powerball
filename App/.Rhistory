"3 White + Powerball",
"3 White            ",
"2 White + Powerball",
"1 White + Powerball",
"Powerball          ")
as.table(m)
m= matrix(c(
"5 White + Powerball",    9       ,   1      ,
"5 White            ",    9       ,      2     ,
"4 White + Powerball",    9       ,   3        ,
"4 White            ",    9       ,      4     ,
"3 White + Powerball",    1000       ,   5     ,
"3 White            ",    9       ,      6    ,
"2 White + Powerball",    9       ,   7        ,
"1 White + Powerball",    9       ,   8        ,
"Powerball          ",    9       ,      9
),nrow = 10, ncol = 3,byrow = T)
m= matrix(c(
"5 White + Powerball",    9       ,   1      ,
"5 White            ",    9       ,      2     ,
"4 White + Powerball",    9       ,   3        ,
"4 White            ",    9       ,      4     ,
"3 White + Powerball",    1000       ,   5     ,
"3 White            ",    9       ,      6    ,
"2 White + Powerball",    9       ,   7        ,
"1 White + Powerball",    9       ,   8        ,
"Powerball          ",    9       ,      9
),nrow = 9, ncol = 3,byrow = T)
m
colnames(m) <- c("     Ticket        ", "Freq", "Won")
rownames(m) <- c("5 White + Powerball",
"5 White            ",
"4 White + Powerball",
"4 White            ",
"3 White + Powerball",
"3 White            ",
"2 White + Powerball",
"1 White + Powerball",
"Powerball          ")
as.table(m)
shiny::runApp('Documents/GitHub/Powerball/App')
shiny::runApp('Documents/GitHub/Powerball/App')
shiny::runApp('Documents/GitHub/Powerball/App')
shiny::runApp('Documents/GitHub/Powerball/App')
library(dygraphs)
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
library(dygraphs)
install.packages("dygraphs")
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
library(dygraphs)
dygraph(nhtemp, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
dygraphs
nhtemp
x=1:10
dygraph(x, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
nhtemp
nhtemp
nhtemp()
nhtemp
xts(1:10)
data(sample_matrix)
sample_matrix
data
data(sample_matrix)
sample.xts <- as.xts(sample_matrix, descr='my new xts object')
class(sample.xts)
str(sample.xts)
head(sample.xts)
m
data(m)
sample.xts <- as.xts(m, descr='my new xts object')
mdeath
mdeaths
dygraph(mdeaths, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
dygraph(mdeaths, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1920-01-01", "1960-01-01"))
mdeaths
dygraph(mdeaths, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1974-01", "1979-12"))
dygraph(mdeaths, main = "New Haven Temperatures") %>%
dyRangeSelector(dateWindow = c("1974-01-01", "1979-01-01"))
mdeaths
dygraph(mdeaths, main = "How much I Love You Per Day (David and Jessica)") %>%
dyRangeSelector(dateWindow = c("1992-01-01", "2016-08-27"))
dygraph(mdeaths, main = "How much I Love You Per Day (David and Jessica)") %>%
dyRangeSelector(dateWindow = c("1992-01-01", "2016-08-27"))
x = 1:2000
x = x^2
x
2000/12
1999/12
1998/12
1996/12
1995/12
1994/12
1992/12
x = 1:1992
x = x^2
m = matrix(x, nrow = 166, ncol = 12)
m = matrix(x, nrow = 166, ncol = 12)
dygraph(m, main = "How much I Love You Per Day (David and Jessica)") %>%
dyRangeSelector(dateWindow = c("2006-08-01", "2016-08-27"))
months()
colnames(m, c(months(1:12)))
months(1:12)
c(months(1:12))
months.Date(1)
months(1,)
months(.leap.seconds)
.leap.seconds
months(.leap.seconds)
months("1")
months("11")
months("11-21-1992")
mdeaths
colnames(m, c("Jan",  "Feb",  "Mar",  "Apr",  "May",  "Jun",  "Jul",  "Aug",  "Sep",  "Oct",  "Nov",  "Dec"))
m = matrix(x, nrow = 166, ncol = 12, byrow = T)
colnames(m, c("Jan",  "Feb",  "Mar",  "Apr",  "May",  "Jun",  "Jul",  "Aug",  "Sep",  "Oct",  "Nov",  "Dec"))
x = 1:1992
x = x^2
m = matrix(x, nrow = 166, ncol = 12, byrow = T)
m
colnames(m, c("Jan",  "Feb",  "Mar",  "Apr",  "May",  "Jun",  "Jul",  "Aug",  "Sep",  "Oct",  "Nov",  "Dec"))
x = x^2
m = matrix(x, nrow = 166, ncol = 12, byrow = T,
dimnames = list(c(1:10),
c(c("Jan",  "Feb",  "Mar",  "Apr",  "May",  "Jun",  "Jul",  "Aug",  "Sep",  "Oct",  "Nov",  "Dec"))))
x = x^2
m = matrix(x, nrow = 166, ncol = 12, byrow = T,
dimnames = list(1:166,
c(c("Jan",  "Feb",  "Mar",  "Apr",  "May",  "Jun",  "Jul",  "Aug",  "Sep",  "Oct",  "Nov",  "Dec"))))
dygraph(m, main = "How much I Love You Per Day (David and Jessica)") %>%
dyRangeSelector(dateWindow = c("2006-08-01", "2016-08-27"))
m = matrix(x, nrow = 166, ncol = 12, byrow = T,
dimnames = list(2006:2016),
c(c("Jan",  "Feb",  "Mar",  "Apr",  "May",  "Jun",  "Jul",  "Aug",  "Sep",  "Oct",  "Nov",  "Dec"))))
m
x = 1:1992
x = x^2
m = matrix(x, nrow = 166, ncol = 12, byrow = T,
dimnames = list(2006:2016),
c(c("Jan",  "Feb",  "Mar",  "Apr",  "May",  "Jun",  "Jul",  "Aug",  "Sep",  "Oct",  "Nov",  "Dec"))))
x = 1:1992
x = x^2
m = matrix(x, nrow = 166, ncol = 12, byrow = T,
dimnames = list("2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016"),
c(c("Jan",  "Feb",  "Mar",  "Apr",  "May",  "Jun",  "Jul",  "Aug",  "Sep",  "Oct",  "Nov",  "Dec"))))
x = 1:1992
x = x^2
m = matrix(x, nrow = 166, ncol = 12, byrow = T,
dimnames = list("2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016"),
c(c("Jan",  "Feb",  "Mar",  "Apr",  "May",  "Jun",  "Jul",  "Aug",  "Sep",  "Oct",  "Nov",  "Dec")))
x = x^2
m = matrix(x, nrow = 166, ncol = 12, byrow = T,
dimnames = list(c("2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016"),
c("Jan",  "Feb",  "Mar",  "Apr",  "May",  "Jun",  "Jul",  "Aug",  "Sep",  "Oct",
"Nov",  "Dec")))
12*11
x = 1:132
x = x^2
m = matrix(x, nrow = 166, ncol = 12, byrow = T,
dimnames = list(c("2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016"),
c("Jan",  "Feb",  "Mar",  "Apr",  "May",  "Jun",  "Jul",  "Aug",  "Sep",  "Oct",
"Nov",  "Dec")))
m = matrix(x, nrow = 11, ncol = 12, byrow = T,
dimnames = list(c("2006","2007","2008","2009","2010","2011","2012","2013","2014","2015","2016"),
c("Jan",  "Feb",  "Mar",  "Apr",  "May",  "Jun",  "Jul",  "Aug",  "Sep",  "Oct",
"Nov",  "Dec")))
dygraph(m, main = "How much I Love You Per Day (David and Jessica)") %>%
dyRangeSelector(dateWindow = c("2006-08-01", "2016-08-27"))
mdeaths
is.dataframe(mdeaths)
is.data.frame(mdeaths)
is.data.matrix(mdeaths)
is.matrix(mdeaths)
typeof(mdeaths)
myts <- ts(myvector, start=c(2009, 1), end=c(2014, 12), frequency=12)
myts <- ts(1:100, start=c(2009, 1), end=c(2014, 12), frequency=12)
# subset the time series (June 2014 to December 2014)
myts2 <- window(myts, start=c(2014, 6), end=c(2014, 12))
# plot series
plot(myts)
dygraph(myts, main = "How much I Love You Per Day (David and Jessica)") %>%
dyRangeSelector(dateWindow = c("2006-08-01", "2016-08-27"))
myts <- ts((1:100)^2, start=c(2009, 1), end=c(2014, 12), frequency=12)
# subset the time series (June 2014 to December 2014)
myts2 <- window(myts, start=c(2014, 6), end=c(2014, 12))
# plot series
plot(myts)
dygraph(myts, main = "How much I Love You Per Day (David and Jessica)") %>%
dyRangeSelector(dateWindow = c("2006-08-01", "2016-08-27"))
myts <- ts((1:1000)^2, start=c(2009, 1), end=c(2014, 12), frequency=12)
dygraph(myts, main = "How much I Love You Per Day (David and Jessica)") %>%
dyRangeSelector(dateWindow = c("2006-08-01", "2016-08-27"))
myts <- ts((1:1000)^2, start=c(2009, 8), end=c(2016, 8), frequency=12)
dygraph(myts, main = "How much I Love You Per Day (David and Jessica)") %>%
dyRangeSelector(dateWindow = c("2006-08-01", "2016-08-27"))
dygraph(myts, main = "How much I Love You Per Day (David and Jessica)") %>%
dyRangeSelector(dateWindow = c("2009-08-01", "2016-08-27"))
myts <- ts((1:1000)^4, start=c(2009, 8), end=c(2016, 8), frequency=12)
myts <- ts((1:1000)^4, start=c(2009, 8), end=c(2016, 8), frequency=12)
dygraph(myts, main = "How much I Love You Per Day (David and Jessica)") %>%
dyRangeSelector(dateWindow = c("2009-08-01", "2016-08-27"))
myts <- ts((1:1000)^4, start=c(2009, 8), end=c(2016, 8), frequency=12)
dygraph(myts, main = "How much I Love You Per Day (David and Jessica)") %>%
dyRangeSelector(dateWindow = c("2009-08-01", "2016-08-27"))
library(dygraphs)
library(shiny)
ui <- fluidPage(
plotOutput("plot1")
)
server <- function(input, output) {
myts <- ts((1:1000)^4, start=c(2009, 8), end=c(2016, 8), frequency=12)
dygraph(myts, main = "How much I Love You Per Day (David and Jessica)") %>%
dyRangeSelector(dateWindow = c("2009-08-01", "2016-08-27"))
}
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop')
shiny::runApp('Desktop')
myts <- ts((1:1000)^4, start=c(2009, 8), end=c(2016, 8), frequency=12)
dygraph(myts, main = "How much I Love You Per Day (David and Jessica)") %>%
dyRangeSelector(dateWindow = c("2009-08-01", "2016-08-27"))
shiny::runApp('Desktop')
tagwspace <- "[[:blank:]]*<[^>]*>[[:blank:]]*"
nothing <- ""
Sort <- suppressWarnings(readLines("http://www.worldatlas.com/cntycont.htm"))
Sort
Africa <- Sort[147:200]
Africa <- gsub(pattern = tagwspace, replacement = nothing, Africa)
p
tagwspace <- "[[:blank:]]*<[^>]*>[[:blank:]]*"
nothing <- ""
Sort <- suppressWarnings(readLines("http://www.worldatlas.com/cntycont.htm"))
Africa <- Sort[147:200]
Africa <- gsub(pattern = tagwspace, replacement = nothing, Africa)
Asia <- Sort[205:248]
Asia <- gsub(pattern = tagwspace, replacement = nothing, Asia)
Europe <- Sort[253:299]
Europe <- gsub(pattern = tagwspace, replacement = nothing, Europe)
N.America <- Sort[304:326]
N.America <- gsub(pattern = tagwspace, replacement = nothing, N.America)
Australia <- Sort[331:344]
Australia <- gsub(pattern = tagwspace, replacement = nothing, Australia)
S.America <- Sort[349:360]
S.America <- gsub(pattern = tagwspace, replacement = nothing, S.America)
Asia[9] <- "Timor-Leste"
Asia[6] <- "Burma"
Asia[32] <- "Russia"
Asia[45] <- "Hong Kong"
Asia[46] <- "Taiwan"
Asia[47] <- "Macau"
Africa[5] <- "Burkina Faso"
Africa[8] <-  "Cabo Verde"
Africa[12] <- "Congo, Republic of the"
Africa[13] <- "Congo, Democratic Republic of the"
Africa[20] <- "Gambia, The"
Africa[24] <- "Cote d'Ivoire"
Australia[5] <- "Micronesia, Federated States of"
Australia[15] <- "Cook Islands"
Australia[16] <- "French Polynesia"
Australia[17] <- "New Caledonia"
Australia[18] <- "Guam"
N.America[2] <- "Bahamas, The"
N.America[24] <- "Puerto Rico"
N.America[25] <- "Anguilla"
N.America[26] <- "Cayman Islands"
N.America[27] <- "Aruba"
N.America[28] <- "Montserrat"
N.America[29] <- "British Virgin Islands"
N.America[30] <- "Virgin Islands"
N.America[31] <- "Greenland"
N.America[32] <- "Bermuda"
S.America[13] <- "Falkland Islands (Islas Malvinas)"
Europe[47] <- "Holy See (Vatican City)"
Europe[48] <- "European Union"
Europe[49] <- "Faroe Islands"
Europe[50] <- "Guernsey"
Europe[51] <- "Jersey"
Europe[52] <- "Gibraltar"
continents=c("Asia","Europe","Africa","N.America","S.America","Australia")
########################################################################
#2. Countries by gini Index
mainpage1<- readLines("https://www.cia.gov/library/publications/the-world-factbook/rankorder/2172rank.html")
country = "html\"><strong>[[:alpha:]]"
lines = grep(country, mainpage1) #139, country lines
countryline = mainpage1[lines]
country.names <- gsub(pattern = tagwspace, replacement = nothing,
countryline)
ginilines = mainpage1[lines+3]
gini = gsub(tagwspace, nothing, ginilines)
gini.index = as.numeric(gini)
names(gini.index)=country.names
########################################################################
#3. Countries by Population
mainpage2<- readLines("https://www.cia.gov/library/publications/the-world-factbook/rankorder/2119rank.html")
index1 <- grep(mainpage2,pattern="China")[3]
mainpage2[index1]
vecname<- character(length=240)
vector <- numeric(length=240)
for(i in 1:240){
Pop <- gsub(pattern="<[^>]+>",replacement=nothing,mainpage2[index1+3+(23*(i-1))])
Pop <- gsub(pattern="\t",replacement=nothing,Pop)
Pop <- gsub(pattern="^[[:blank:]]*",replacement=nothing,Pop)
Pop <- gsub(pattern="[[:punct:]]",replacement=nothing,Pop)
Pop <- as.numeric(Pop)
Name <- gsub(pattern="<[^>]+>",replacement=nothing,mainpage2[index1+(23*(i-1))])
Name <- gsub(pattern="\t",replacement=nothing,Name)
vector[i] <- Pop
vecname[i] <- Name
}
names(vector) <- vecname
length(vector)
population <- vector
########################################################################
#4. Countries by Life Expectancy
page = readLines("https://www.cia.gov/library/publications/the-world-factbook/rankorder/2102rank.html")
grep("right", page)
x = seq(1150, 6256, by = 23)
life.expectancy.lines = page[x]
life.expectancy = as.numeric( gsub(pattern = tagwspace, replacement = nothing, life.expectancy.lines) )
grep("strong", page)
y = seq(1147, 6253, by = 23)
country.names.lines = page[y]
country.names2 = gsub(pattern = tagwspace, replacement = nothing, country.names.lines)
names(life.expectancy) = country.names2
########################################################################
#Checking
population
gini.index
life.expectancy
length(population)
length(gini.index)
length(life.expectancy)
names(gini.index)
########################################################################
#5. Matches Countries by L.E. and G.I.
matching.countries = intersect(names(gini.index),names(life.expectancy))
matching.countries
########################################################################
#6. Graphs Countries by Continents by L.E. and G.I.
df = data.frame(population[matching.countries],gini.index[matching.countries],life.expectancy[matching.countries])
head(df)
#Assigns a distinct color to a country to their respective continent
country.continents = rep(NA, length(matching.countries))
for(i in 1:length(matching.countries)){
if (any(is.element(Asia, matching.countries[i]))){
country.continents[i] = "Asia"
}
else if (any(is.element(Europe, matching.countries[i]))){
country.continents[i] = "Europe"
}
else if (any(is.element(Africa, matching.countries[i]))){
country.continents[i] = "Africa"
}
else if (any(is.element(N.America, matching.countries[i]))){
country.continents[i] = "N.America"
}
else if (any(is.element(S.America, matching.countries[i]))){
country.continents[i] = "S.America"
}
else if (any(is.element(Australia, matching.countries[i]))){
country.continents[i] = "Australia"
}
}
country.continents
country.colors = rep(NA, length(country.continents))
col = c("red", "darkred", "#fed52e", "greenyellow","green4","hotpink")
for(i in 1:length(col)){
color = which(country.continents==continents[i])
country.colors[color]=col[i]
}
#Scatterplot
plot(df$gini.index.matching.countries., df$life.expectancy.matching.countries.,
main = "Countries by Continent", xlab="Gini Index – Distribution of Family Income", ylab="Life Expectancy",
col = country.colors,pch = 16)
legend("bottomleft", legend = continents, pch = 16, col = col, box.lty=1)
identify(df$gini.index.matching.countries., df$life.expectancy.matching.countries., labels = matching.countries)
identify(df$gini.index.matching.countries., df$life.expectancy.matching.countries., labels = df$gini.index.matching.countries.)
########################################################################
#7.  Population Sum by Continents
sum.Asia <- sum(population[Asia])
sum.Africa <- sum(population[Africa])
sum.Australia <- sum(population[Australia])
sum.N.America <- sum(population[N.America])
sum.S.America <- sum(population[S.America])
sum.Europe <- sum(population[Europe])
sum.continents=c(sum.Asia,sum.Europe,sum.Africa,sum.N.America,sum.S.America,sum.Australia)
names(sum.continents)=continents
sum.continents
#8. Gini Index by Continents
Australia1=gini.index[matching.countries][Australia]
Australia1 <- Australia1[!is.na(Australia1)]
Australia1
Asia1=gini.index[matching.countries][Asia]
Asia1 <- Asia1[!is.na(Asia1)]
Asia1
N.America1=gini.index[matching.countries][N.America]
N.America1 <- N.America1[!is.na(N.America1)]
N.America1
S.America1=gini.index[matching.countries][S.America]
S.America1 <- S.America1[!is.na(S.America1)]
S.America1
Africa1=gini.index[matching.countries][Africa]
Africa1 <- Africa1[!is.na(Africa1)]
Africa1
Europe1=gini.index[matching.countries][Europe]
Europe1 <- Europe1[!is.na(Europe1)]
Europe1
gini.Asia <- mean(Asia1)
gini.Africa <- mean(Africa1)
gini.Australia <- mean(Australia1)
gini.N.America <- mean(N.America1)
gini.S.America <- mean(S.America1)
gini.Europe <- mean(Europe1)
gini.continents=c(gini.Asia,gini.Europe,gini.Africa,gini.N.America,gini.S.America,gini.Australia)
names(gini.continents)=continents
gini.continents
#9. Life Expectancy by Continents
Australia2=life.expectancy[matching.countries][Australia]
Australia2 <- Australia2[!is.na(Australia2)]
Australia2
Asia2=life.expectancy[matching.countries][Asia]
Asia2 <- Asia2[!is.na(Asia2)]
Asia2
N.America2=life.expectancy[matching.countries][N.America]
N.America2 <- N.America2[!is.na(N.America2)]
N.America2
S.America2=life.expectancy[matching.countries][S.America]
S.America2 <- S.America2[!is.na(S.America2)]
S.America2
Africa2=life.expectancy[matching.countries][Africa]
Africa2 <- Africa2[!is.na(Africa2)]
Africa2
Europe2=life.expectancy[matching.countries][Europe]
Europe2 <- Europe2[!is.na(Europe2)]
Europe2
life.Asia <- mean(Asia2)
life.Africa <- mean(Africa2)
life.Australia <- mean(Australia2)
life.N.America <- mean(N.America2)
life.S.America <- mean(S.America2)
life.Europe <- mean(Europe2)
life.continents=c(life.Asia,life.Europe,life.Africa,life.N.America,life.S.America,life.Australia)
names(life.continents)=continents
life.continents
########################################################################
#10. Graphs continents by L.E. and G.I
#Scatterplot
df2 = data.frame(sum.continents, gini.continents, life.continents)
df2
with(df2, {
main = "Population of Continents (in Billions, July 2014 est.)", xlab="gini Index – Distribution of Family Income", ylab="Life Expectancy", bg = col) # xlab and ylab automatically
symbols(gini.continents, life.continents, circles = sum.continents/6000000000, inches = FALSE,
})
legend("bottomleft", legend = continents, pch = 16, col = col, box.lty=1)
identify(df2$gini.continents, df2$life.continents, labels = continents)
tagwspace <- "[[:blank:]]*<[^>]*>[[:blank:]]*"
nothing <- ""
Sort <- suppressWarnings(readLines("http://www.worldatlas.com/cntycont.htm"))
Africa <- Sort[147:200]
Africa <- gsub(pattern = tagwspace, replacement = nothing, Africa)
Asia <- Sort[205:248]
Asia <- gsub(pattern = tagwspace, replacement = nothing, Asia)
Europe <- Sort[253:299]
Europe <- gsub(pattern = tagwspace, replacement = nothing, Europe)
N.America <- Sort[304:326]
N.America <- gsub(pattern = tagwspace, replacement = nothing, N.America)
Australia <- Sort[331:344]
Australia <- gsub(pattern = tagwspace, replacement = nothing, Australia)
S.America <- Sort[349:360]
S.America <- gsub(pattern = tagwspace, replacement = nothing, S.America)
tagwspace <- "[[:blank:]]*<[^>]*>[[:blank:]]*"
nothing <- ""
tagwspace <- "[[:blank:]]*<[^>]*>[[:blank:]]*"
nothing <- ""
Sort <- suppressWarnings(readLines("http://www.worldatlas.com/cntycont.htm"))
Sort
Africa <- Sort[147:200]
Africa <- gsub(pattern = tagwspace, replacement = nothing, Africa)
Africa
Sort <- suppressWarnings(readLines("http://www.worldatlas.com/cntycont.htm"))
readLines("http://www.worldatlas.com/cntycont.htm")
Africa <- Sort[147:200]
Africa
Sort <- suppressWarnings(readLines("http://www.worldatlas.com/cntycont.htm"))
Sort
Africa
Sort
Africa
mainpage1<- readLines("https://www.cia.gov/library/publications/the-world-factbook/rankorder/2172rank.html")
country = "html\"><strong>[[:alpha:]]"
country
mainpage1
lines
lines
grep(country, mainpage1)
shiny::runApp('Documents/GitHub/Powerball/App')
shiny::runApp('Documents/GitHub/Powerball/App')
shiny::runApp('Documents/GitHub/Powerball/App')
shiny::runApp('Documents/GitHub/Powerball/App')
shiny::runApp('Documents/GitHub/Powerball/App')
shiny::runApp('Documents/GitHub/Powerball/App')
shiny::runApp('Documents/GitHub/Powerball/App')
shiny::runApp('Documents/GitHub/Powerball/App')
shiny::runApp('Documents/GitHub/Powerball/App')
shiny::runApp()
shiny::runApp()
