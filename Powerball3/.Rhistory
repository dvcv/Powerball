winnings1
install.packages("shiny")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
runExample("01_hello")
install.packages("shiny")
install.packages("shiny")
runExample("01_hello")
names(iris)
selectInput('xcol', 'X Variable', names(iris)),
shiny::runApp('~/Downloads/downloads/code')
ui <- fluidPage(
headerPanel('Iris k-means clustering'),
sidebarPanel(
selectInput('xcol', 'X Variable', names(iris)),
selectInput('ycol', 'Y Variable', names(iris),
selected = names(iris)[[2]]),
numericInput('clusters', 'Cluster count', 3,
min = 1, max = 9)
),
mainPanel(
plotOutput('plot1')
)
)
ui
function(input, output) {
selectedData <- reactive({
iris[, c(input$xcol, input$ycol)]
})
clusters <- reactive({
kmeans(selectedData(), input$clusters)
})
output$plot1 <- renderPlot({
par(mar = c(5.1, 4.1, 0, 1))
plot(selectedData(),
col = clusters()$cluster,
pch = 20, cex = 3)
points(clusters()$centers, pch = 4, cex = 4, lwd = 4)
})
}
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage("Hello World")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "a", label = "Select a number", min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "a", label = "Select a number", min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "a", label = "Select a number", min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "a", label = "Select a number", min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "a", label = "Select a number", min = 1, max = 100, value = 3)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "a", label = "Select a number", min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "a", label = "Select a number", min = 1, max = 100)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "a", label = "Select a number", min = 1, max = 100, vvalue = 15)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "a", label = "Select a number", min = 1, max = 100, vvalue = 15)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "a", label = "Select a number", min = 1, max = 100, vvalue = 15)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "a", label = "Select a number", min = 1, max = 100, value = 15)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
?sliderInput
?sliderInput
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "a", label = "Select a number", min = 1, max = 100, value = 15),plotOutput("hist")
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
hist(rnorm(100))
ui <- fluidPage(
sliderInput(inputId = "num", label = "Select a number", min = 1, max = 100, value = 15),plotOutput("hist")
)
server <- function(input, output) {
output$hist = renderPlot({hist(rnorm(100))})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "num", label = "Select a number", min = 1, max = 100, value = 15),plotOutput("hist")
)
server <- function(input, output) {
output$hist = renderPlot({hist(rnorm(input$num))})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('~/Downloads/downloads/code')
shiny::runApp('~/Downloads/downloads/code')
shiny::runApp('~/Downloads/downloads/code')
ls
ls
devtools::install_github("rstudio/shinyapps")
install.packages("devtools")
library("devtools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
devtools::install_github("rstudio/shinyapps")
shiny::runApp('~/Downloads/downloads/code')
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('~/Desktop')
shiny::runApp('~/Desktop')
n=as.integer(10000) ## Change the amount of tickets bought here
```
##WHY MILLIONAIRES DO NOT PLAY POWERBALL
This is a simple powerball simulater representing ONE single game of powerball where many quick pick tickets were bought.  (<http://www.powerball.com/pb_home.asp>).
```{r, echo=FALSE}
GRANDPRIZE=as.integer(60000000) #Change grand prize here
```
**Grand Prize**
`r GRANDPRIZE`
**Winning Ticket**
```{r, echo=FALSE}
winning.ticket=c(sort(sample(69,5)),sample(26,1))
winning.ticket
shiny::runApp('~/Desktop')
getwd()
shiny::runApp('~/Desktop')
