ticket[[i]]= c(sort(sample(69,5)),sample(26,1))
}
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
winning.ticket=NULL
winning.ticket=list(winning.ticket)
for (i in 1:n()){
winning.ticket= c(sort(sample(69,5)),sample(26,1))
}
winning.ticket
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Documents/GitHub/fleetwood')
shiny::runApp('Documents/GitHub/fleetwood')
install.packages("xgboost")
library("xgboost", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
shiny::runApp('Documents/GitHub/fleetwood')
shiny::runApp('Documents/GitHub/fleetwood')
install.packages("DT")
install.packages("DT")
shiny::runApp('Documents/GitHub/fleetwood')
shiny::runApp('Desktop')
# 05-actionButton
library(shiny)
ui <- fluidPage(
actionButton(inputId = "clicks",
label = "Click me")
)
server <- function(input, output) {
observeEvent(input$clicks, {
print(as.numeric(input$clicks))
})
}
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num1",label = "First Number",min = 1,max = 69,value = 1),
sliderInput(inputId = "num2",label = "First Number",min = 1,max = 69,value = 1),
sliderInput(inputId = "num3",label = "First Number",min = 1,max = 69,value = 1),
sliderInput(inputId = "num4",label = "First Number",min = 1,max = 69,value = 1),
sliderInput(inputId = "num5",label = "First Number",min = 1,max = 69,value = 1),
sliderInput(inputId = "num6",label = "First Number",min = 1,max = 26,value = 1)
)
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
shiny::runApp('Desktop')
c(sort(sample(69,5)),sample(26,1))
shiny::runApp('Desktop')
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
c(sort(sample(69,5)),sample(26,1))
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
c(sort(sample(69,5)),sample(26,1))
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
c(winningTicket(), \n, "Last number represents Powerball.")
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
ticket[[1]]
ticket[[3]]
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
c(input$num1,input$num2,input$num3,input$num4,input$num5,input$num6)
c(sort(sample(69,5)),sample(26,1))
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp()
shiny::runApp()
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
doc.html = htmlTreeParse('http://www.ncaa.com/news/ncaa/ncaa-and-olympics/2016-08-06/2016-rio-olympics-keep-track-ncaa-student-athletes-olympic',
useInternal = TRUE)
doc.html = htmlTreeParse('http://www.ncaa.com/news/ncaa/ncaa-and-olympics/2016-08-06/2016-rio-olympics-keep-track-ncaa-student-athletes-olympic',
useInternal = TRUE)
library(XML)
install.packages("XML")
library(XML)
doc.html = htmlTreeParse('http://www.ncaa.com/news/ncaa/ncaa-and-olympics/2016-08-06/2016-rio-olympics-keep-track-ncaa-student-athletes-olympic',
useInternal = TRUE)
doc.html
doc.text = unlist(xpathApply(doc.html, '//p', xmlValue))
doc.text
xmlValue
doc.text = unlist(xpathApply(doc.html, '//p'))
doc.text
doc.html
doc.text = unlist(xpathApply(doc.html, '//p'))
doc.text
doc.html
head(doc.html)
doc.html
doc.text = unlist(xpathApply(doc.html, '//p'))
doc.text
doc.html
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
x = rnorm(100)
x
maxtrix(rnorm(100),rnorm(100))
matrix(rnorm(100),rnorm(100))
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
mdat <- matrix(rnorm(100), nrow = 10, ncol = 10, byrow = TRUE)
mdat
y = list()
y[[1]]=mdat
y[[2]]=mdat*2
y
y[[1]]=mdat
y[[2]]=mdat*0
y
y[[2]]=mdat*2
y
y[[1]][,10]
sort(y[[1]][,10])
which(sort(y[[1]][,10]))
sort(y[[1]][,10])[1:5]
which(sort(y[[1]][,10])[6:10])
which(y[[1]][,10])==sort(y[[1]][,10])[6:10])
which(y[[1]][,10]==sort(y[[1]][,10])[6:10])
y[[1]][,10]
which(y[[1]][,10]==sort(y[[1]][,10])[6])
y[[1]][,10])[6]
y[[1]][,10])[6]
sort(y[[1]][,10])[6:10]
which(y[[1]][,10]>=min(sort(y[[1]][,10])[6:10])
)
y[[1]][,10]
which(y[[1]][,10]>=min(sort(y[[1]][,10])[6:10]))
y
y[[1]][which(y[[1]][,10]>=min(sort(y[[1]][,10])[6:10]))]
y[[1]][which(y[[1]][,10]>=min(sort(y[[1]][,10])[6:10])),]
for(i in 1:2){
y[[i]][which(y[[i]][,10]>=min(sort(y[[i]][,10])[6:10])),]
}
y
x = list()
x = NULL
for(i in 1:2){
x = y[[i]][which(y[[i]][,10]>=min(sort(y[[i]][,10])[6:10])),]
}
x
x = list()
x = NULL
for(i in 1:2){
x[[i]] = y[[i]][which(y[[i]][,10]>=min(sort(y[[i]][,10])[6:10])),]
}
x
which(y[[1]][,10]||sort(y[[1]][,10])[6:10])
doc.html = htmlTreeParse('http://www.ncaa.com/news/ncaa/ncaa-and-olympics/2016-08-06/2016-rio-olympics-keep-track-ncaa-student-athletes-olympic',
useInternal = TRUE)
doc.html
doc.html
doc.text = unlist(xpathApply(doc.html, '//tr'))
doc.text
mdat <- matrix(rnorm(100), nrow = 10, ncol = 10, byrow = TRUE)
y = list()
y[[1]]=mdat
y[[2]]=mdat*2
which(y[[1]][,10]sort(y[[1]][,10])[6:10])
x = list()
x = NULL
for(i in 1:2){
x[[i]] = y[[i]][which(y[[i]][,10]>=min(sort(y[[i]][,10])[6:10])),]
}
x
doc.html
doc.text = unlist(xpathApply(doc.html, '//div'))
doc.text
doc.html
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
x
x=c(sum.5w.1r*GRANDPRIZE, sum.5w*1000000, sum.4w.1r*50000, sum.4w*100,sum.3w.1r*100, sum.3w*7, sum.2w.1r*7, sum.1w.1r*4, sum.1r*4,winnings)
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
n=as.integer(5200) ## Change the amount of tickets bought here
```
##WHY YOU SHOULD NOT GAMBLE ON POWERBALL
This is a simple powerball simulater representing many games played over a lifetime. Assuming you played powerball about once a week for 100 years (52*100=5200) and played random numbers every time. (<http://www.powerball.com/pb_home.asp>).
```{r, echo=FALSE}
GRANDPRIZE=as.integer(60000000) #Change grand prize here
```
**Grand Prize**
`r GRANDPRIZE`
```{r, echo=FALSE}
winning.ticket=NULL
winning.ticket=list(winning.ticket)
for (i in 1:n){
winning.ticket[[i]]= c(sort(sample(69,5)),sample(26,1))
}
ticket=NULL
ticket=list(ticket)
for (i in 1:n){
ticket[[i]]= c(sort(sample(69,5)),sample(26,1))
}
sum.5w.1r=0
sum.5w=0
sum.4w.1r=0
sum.4w=0
sum.3w.1r=0
sum.3w=0
sum.2w.1r=0
sum.1w.1r=0
sum.1r=0
win.ticket=NULL
win.ticket=list(win.ticket)
for(i in 1:n){
if (sum(ticket[[i]]==winning.ticket[[i]])==6){
sum.5w.1r=sum.5w.1r+1
win.ticket[[i]]=ticket[[i]]}
else if(sum(ticket[[i]][1:5]==winning.ticket[[i]][1:5])==5){
sum.5w=sum.5w+1
win.ticket[[i]]=ticket[[i]]}
else if(sum(ticket[[i]][1:5]%in%winning.ticket[[i]][1:5])==4 && sum(ticket[[i]][6]==winning.ticket[[i]][6])==1){
sum.4w.1r=sum.4w.1r+1
win.ticket[[i]]=ticket[[i]]}
else if(sum(ticket[[i]][1:5]%in%winning.ticket[[i]][1:5])==4){
sum.4w=sum.4w+1
win.ticket[[i]]=ticket[[i]]}
else if(sum(ticket[[i]][1:5]%in%winning.ticket[[i]][1:5])==3 && sum(ticket[[i]][6]==winning.ticket[[i]][6])==1){
sum.3w.1r=sum.3w.1r+1
win.ticket[[i]]=ticket[[i]]}
else if(sum(ticket[[i]][1:5]%in%winning.ticket[[i]][1:5])==3){
sum.3w=sum.3w+1
win.ticket[[i]]=ticket[[i]]}
else if(sum(ticket[[i]][1:5]%in%winning.ticket[[i]][1:5])==2 && sum(ticket[[i]][6]==winning.ticket[[i]][6])==1){
sum.2w.1r=sum.2w.1r+1
win.ticket[[i]]=ticket[[i]]}
else if(sum(ticket[[i]][1:5]%in%winning.ticket[[i]][1:5])==1 && sum(ticket[[i]][6]==winning.ticket[[i]][6])==1){
sum.1w.1r=sum.1w.1r+1
win.ticket[[i]]=ticket[[i]]}
else if(sum(ticket[[i]][6]==winning.ticket[[i]][6])==1){
sum.1r=sum.1r+1
win.ticket[[i]]=ticket[[i]]
}
}
win.ticket=split(unlist(win.ticket), ceiling(seq_along(unlist(win.ticket))/6))
winnings=sum.5w.1r*GRANDPRIZE+sum.5w*1000000+sum.4w.1r*50000+sum.4w*100+sum.3w.1r*100+sum.3w*7+sum.2w.1r*7+sum.1w.1r*4+sum.1r*4
```
**Games Played**
`r as.integer(n)`
```{r, echo=FALSE}
x=c(sum.5w.1r,sum.5w,sum.4w.1r,sum.4w,sum.3w.1r,sum.3w,sum.2w.1r,sum.1w.1r,sum.1r,length(win.ticket))
barplot(x,las=2,names.arg=c("5W 1R","5W","4W 1R","4W","3W 1R","3W","2W 1R","1W 1R","1R","Total"),col=rainbow(10),main=paste("Winning Tickets"),ylab="Winning Tickets")
```
```{r, echo=FALSE}
y=c("Grand Prize","1,000,000","50,000","100","100","7","7","4","4","Total")
x=c(sum.5w.1r*GRANDPRIZE, sum.5w*1000000, sum.4w.1r*50000, sum.4w*100,sum.3w.1r*100, sum.3w*7, sum.2w.1r*7, sum.1w.1r*4, sum.1r*4,winnings)
barplot(x,las=2,names.arg=c("5W 1R","5W","4W 1R","4W","3W 1R","3W","2W 1R","1W 1R","1R","Total"),col=rainbow(10),main=paste("Ticket Winnings"),ylab="Money Won")
```
```{r, echo=FALSE}
barplot(c(2*n,winnings,abs(2*n-winnings)),col=c(44:46),names.arg=c("Spent on Tickets","Won","Lost"),ylab="Money")
```
**Best Ticket**
```{r, echo=FALSE}
x=c(sum.5w.1r,sum.5w,sum.4w.1r,sum.4w,sum.3w.1r,sum.3w,sum.2w.1r,sum.1w.1r,sum.1r)
best.ticket=x
q=best.ticket[7]
w=best.ticket[6]
best.ticket[6]=q
best.ticket[7]=w
best.ticket=which(best.ticket!=0)[1]
la=TRUE
while(la){
if (best.ticket==1){
print(paste("Your best ticket had  5 Whites + Powerball Matched ($Grand Prize)"))
break
}
if(best.ticket==2){
print(paste("Your best ticket had  5 Whites Matched ($1,000,000"))
break
}
if(best.ticket==3){
print(paste("Your best ticket had  4 Whites + Powerball Matched ($50,000)"))
break
}
if(best.ticket==4){
print(paste("Your best ticket had  4 Whites Matched ($100)"))
break
}
if(best.ticket==5){
print(paste("Your best ticket had  3 Whites + Powerball Matched ($100)"))
break
}
if(best.ticket==6){
print(paste("Your best ticket had  2 Whites + Powerball Matched ($7)"))
break
}
if(best.ticket==7){
print(paste("Your best ticket had  3 Whites Matched ($7)"))
break
}
if(best.ticket==8){
print(paste("Your best ticket had  1 White + Powerball Matched ($4)"))
break
}
if(best.ticket==9){
print(paste("Your best ticket had  Power Ball Matched ($4)"))
break
}
}
best.ticket
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp()
shiny::runApp()
Q
shiny::runApp('Desktop')
shiny::runApp('Desktop')
shiny::runApp('Documents/GitHub/Powerball/Powerball2')
shiny::runApp('Documents/GitHub/Powerball/Powerball2')
